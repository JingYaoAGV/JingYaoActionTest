#ifndef TOPOVIEW_H
#define TOPOVIEW_H
#include <QGraphicsObject>
#include <QGraphicsScene>
#include <QBrush>
#include <QPen>
#include <QTransform>
#include <QList>
#include "global.h"
#define MARGIN_LEFT 10
#define MARGIN_RIGHT 10
#define MARGIN_TOP 10
#define MARGIN_BOTTOM 5
class TopoEdge;
class TopoVer;
struct ID_Manager{
    int maxID;
    QVector<int> v_IDs;
    ID_Manager(){
        maxID = 0;
        v_IDs.clear();
    }
    int get_newID(int id=-1){
        if(id<0 || v_IDs.contains(id)){
            v_IDs.push_back(++maxID);
            return maxID;
        }
        else{
            if(id>maxID) maxID = id;
            v_IDs.push_back(id);
            return id;
        }
    }
    void clear_IDs(){
        maxID = 0;
       v_IDs.clear();
    }
};
// 拓扑节点
class TopoVer : public QObject, public QGraphicsEllipseItem{
    Q_OBJECT
    Q_PROPERTY(qreal _x READ x WRITE set_x)
    Q_PROPERTY(qreal _y READ y WRITE set_y)
    Q_PROPERTY(int _width READ get_width WRITE set_width)
    Q_PROPERTY(QColor _brush_color READ get_brushColor WRITE set_brushColor)
    Q_PROPERTY(bool _ver_type READ is_callPoint WRITE set_callPoint)
    Q_PROPERTY(QString _name READ get_name)
public:
    TopoVer(QGraphicsScene *scene,int id,QPointF center=QPointF(), int radius=12,int ver_type=NORMAL);
    ~TopoVer(){delete m_pEdgeHead;}
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
    int get_width()const{return rect().width();}
    QColor get_brushColor()const{if(brush().style()==Qt::NoBrush) return Qt::white;else return brush().color();}
    QString get_name()const{return m_strID;}
    int get_id()const{return m_nID;}
    QMap<QString, qreal> get_property();
    bool is_callPoint(){return m_nVerType==CALLPOINT;}
    QVariant itemChange(GraphicsItemChange change, const QVariant &value);

public:
    enum VER_TYPE{NORMAL,CALLPOINT};
    TopoEdge *m_pEdgeHead;
private:
    int m_nVerType;
    int m_nID;
    qreal m_rZValue;
    QString m_strID;
    static QBrush m_brushDefault;

signals:
    void property_change(QMap<QString,qreal>prop);  // 通知属性窗口更改属性编辑器内容
    void position_change(QPointF);    // 通知相邻的边更改其位置
    void ver_dirty();
public slots:
    void set_x(qreal x){if(isSelected()) setPos(x,pos().y());}
    void set_y(qreal y){if(isSelected()) setPos(pos().x(),y);}
    void set_width(int width){if(isSelected()) {set_size(width,width);emit ver_dirty();}}
    void set_size(int w,int h){if(isSelected()) {setRect(-w/2,-h/2,w,h);emit ver_dirty();}}
    void set_brushColor(QColor color){if(isSelected()){if(color==Qt::white) setBrush(Qt::NoBrush); else setBrush(color);m_brushDefault=brush();emit ver_dirty();}}
    void set_vertype(int t){if(isSelected()) {m_nVerType=t;emit ver_dirty();}}
    void set_callPoint(bool flag){if(isSelected()){if(flag) {m_nVerType = CALLPOINT;setBrush(Qt::magenta);} else {m_nVerType = NORMAL;setBrush(Qt::blue);} scene()->update(boundingRect());emit ver_dirty();}}
    void set_selected(){scene()->clearSelection();setSelected(true);}
};

// 拓扑边
class TopoEdge : public QGraphicsObject{
    Q_OBJECT
    Q_PROPERTY(bool _line_type WRITE set_dashLine)
    Q_PROPERTY(int _pen_width READ get_penWidth WRITE set_penWidth)
    Q_PROPERTY(QColor _pen_color WRITE set_penColor)
    Q_PROPERTY(QString _name READ get_name)
    Q_PROPERTY(bool _pen_style READ get_penStyle)
public:
    TopoEdge(QGraphicsScene* scene,int id, int start_id, int end_id, QPointF startpos, QPointF endpos, TopoEdge *next);
    ~TopoEdge(){}
    int type() const;
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
    QRectF boundingRect() const;
    QPen pen() const{return m_pen;}
    int get_penWidth() const{return pen().width();}
    int get_penStyle() const{return pen().style();}
    QColor get_penColor() const{return pen().color();}
    void setPen(QPen p){m_pen = p;scene()->update();}
    void setLine(QLineF line);
    int get_id(){return m_nID;}
    int get_startID(){return m_nStartID;}
    int get_endID(){return m_nEndID;}
    QString get_name(){return m_strID;}
    QMap<QString,qreal> get_property();
    QVariant itemChange(GraphicsItemChange change, const QVariant &value);

public:
    QString m_strStartVerName;
    QString m_strEndVerName;
    int m_nStartID;
    int m_nEndID;
    QPointF m_ptStartPos;
    QPointF m_ptEndPos;
    TopoEdge *m_pNextEdge;
    qreal m_rWeight;
private:
    QPen m_pen;
    int m_nWidth;
    qreal m_rZValue;
    static QPen m_penDefault;
    int m_nID;
    QString m_strID;
signals:
    void property_change(QMap<QString,qreal>);
public slots:
    void set_penColor(QColor color){if(isSelected()){QPen p = pen();p.setColor(color);setPen(p);m_penDefault=p;}}
    void set_penWidth(int n_penWidth){if(isSelected()){QPen p = pen();p.setWidth(n_penWidth+1);setPen(p);m_penDefault=p;}}
    void set_dashLine(bool flag);
    void startPosChange(QPointF start);
    void endPosChange(QPointF end);
    void set_selected(){scene()->clearFocus();scene()->clearSelection();setFocus();setSelected(true);}

};


// 拓扑图视图
class TopoView : public QObject
{
    Q_OBJECT
public:
    TopoView(QGraphicsScene *scene);
    ~TopoView();
    TopoVer *add_topoVer(QPointF center,int id=0,int radius=12,QColor color=Qt::blue,bool is_callPoint=false);
    TopoEdge *add_topoEdge(TopoVer* start,TopoVer* end,int id=-1,QColor color=Qt::green,bool is_dashline=false);
    QGraphicsScene* scene(){return m_scene;}
    QTransform get_transform(){return m_transform;}
    bool remove_topoVer(TopoVer *ver);
    bool remove_topoEdge(QString start, QString end);
    bool remove_topoEdge(TopoEdge* edge);
    int get_verCount(){return m_nVerCount;}
    int get_edgeCount(){return m_nEdgeCount;}
    bool is_verExist(TopoVer *ver) const;
    bool is_edgeExist(QString start, QString end) const;
    void clear();
    // 数据库操作
public:
    bool load_topoMap(QString path);
    bool save_topoMap(QString path);

public:
    QGraphicsScene *m_scene;
    QTransform m_transform;

    // 拓扑图操作
    QMap<QString,TopoVer*> m_verList;
    int m_nVerCount;
    int m_nEdgeCount;
    ID_Manager m_verIDM;
    ID_Manager m_edgeIDM;
signals:
    void step_progressBar(int);
    void set_dirty();  // 通知主窗口拓扑图发生了变化

private slots:
};

#endif // TOPOVIEW_H

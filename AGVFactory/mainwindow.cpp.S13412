#include "mainwindow.h"
#include <QPixmap>
#include <QGraphicsWidget>
#include <QGraphicsLinearLayout>
#include <QLabel>
#include <QDebug>
#include <QTransform>
#include <QGridLayout>
#include <QPalette>
#include <QStatusBar>
#include <QMimeData>
#include <QApplication>
#include <QClipboard>
#include <QApplication>
#include <QDesktopWidget>
#include <QSql>
#include <QSqlDatabase>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlRecord>
#include <QSqlResult>
#include <QMessageBox>
#include <QFileDialog>
#include <QTextCodec>
#include <QTcpServer>
#include <QTcpSocket>
#include <QGraphicsSimpleTextItem>
#include <QLatin1String>
#include <QVBoxLayout>
//#include "rectitem.h"
//#include "ellipseitem.h"
//#include "lineitem.h"
//#include "textitem.h"
//#include "commands.h"
#include "global.h"
//#include "reminddialog.h"
#include "agv.h"
//#include "settingdlg.h"
// 属性栏头文件
#include "qtpropertymanager.h"
#include "qteditorfactory.h"
#include "qttreepropertybrowser.h"
#include <QPen>

#include "dl_dxf.h"
#include "dl_creationadapter.h"

#define WINDOWTITLE_PREFIX QString("AGVFactory - ")
#define SETTING_PREFIX_REMIND QString("/remind/")
#define SETTING_PREFIX_PATH QString("/path/")

#define SETTING_SUFFIX_CURRENTPATH QString("currentPath")
#define SETTING_SUFFIX_HISTORYPATH QString("historyPath")
#define SETTING_SUFFIX_OPENFILEPATH QString("openFilePath")

#define FRAME_FROM_AGV 0x40
#define FRAME_FROM_REQUEST 0x7e

#define diaoxianchonglian  1
const QString MimeType="AGVFactory";
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent)
{
    m_progressBar = new QProgressBar;
    m_progressBarLabel = new QLabel;
    //m_settingDlg = new SettingDlg;
    m_trafficManager = NULL;
    m_missionManager = NULL;
    m_requestManager = NULL;
    m_sweptArea=NULL;
    m_agvinformation=NULL;
    serial = NULL;
    multi=g_setting->value("/multiSystem/multi").toBool();


    QString path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH).toString();
    if(path!=""){
        setWindowTitle(WINDOWTITLE_PREFIX+path);
        openDatabase(path);
        std::string S= path.toStdString();
        //cout<<a;
       createSceneAndView(S);
        createActions();
        createPropertyWindow();
        m_topoView->load_topoMap();
    }
    else
    {
    }
    statusBar()->addWidget(m_progressBar);
    statusBar()->addWidget(m_progressBarLabel);
    statusBar()->hide();
    reset_documentDirty();
    set_appState(APP_STOP);
    createConnections();

    m_trayIcon = new QSystemTrayIcon(this);
    connect(m_trayIcon,SIGNAL(activated(QSystemTrayIcon::ActivationReason)),this,SLOT(onSystemTrayIconClicked(QSystemTrayIcon::ActivationReason)));
    QIcon icon(":/action/images/trayIcon.ico");
    m_trayIconMenu = new QMenu;
    m_trayIconMenu->addAction(tr("退出"),qApp,SLOT(quit()));
    m_trayIcon->setContextMenu(m_trayIconMenu);
    m_trayIcon->setIcon(icon);
    m_trayIcon->setToolTip("AGV");
    m_trayIcon->show();
}

MainWindow::~MainWindow()
{
}

void MainWindow::mousePressEvent(QMouseEvent *event)
{
    QMainWindow::mousePressEvent(event);
}

void MainWindow::keyPressEvent(QKeyEvent *event)
{
    if(m_bKeyLock) return;
    switch(event->key()){
    case 16777216:  //ESC
        updateToolbarUI();
        m_centralView->prepareToDrawItem(NONE);
        m_centralView->prepareToMethod(NONE);
        break;
    case 16777223:  // delete
        if (m_centralScene->selectedItems().isEmpty())
            break;
        foreach(QGraphicsItem* item,m_centralScene->selectedItems()){
            if(item->type()==EDGE){
                //m_topoView->remove_topoEdge((TopoEdge*)item);
            }
            else{
               // QUndoCommand *deleteCommand = new DeleteCommand(m_centralScene,item,m_centralView->m_topoView);
               // m_centralView->m_undoStack->push(deleteCommand);
            }
        }
        m_centralScene->clearSelection();
        break;
    }
}



void MainWindow::createSceneAndView(string f)
{
    qreal xleftborder=0;
    qreal xrightborder=0;
    qreal ytopborder=0;
    qreal ybuttomborder=0;

   /* Test_CreationClass* creationClass = new Test_CreationClass();

    DL_Dxf* dxf = new DL_Dxf();
    if (!dxf->in(f, creationClass)) { // if file open failed
       // std::cerr << f << " could not be opened.\n";
    }
     */
    //getimgdxfborder(creationClass);

     qDebug()<<xleftborder<<""<<xrightborder<<""<<ytopborder<<""<<ybuttomborder;


    /*  QRect rect = QApplication::desktop()->rect();
      qreal  w=rect.width()*0.8;
      qreal  h=rect.height()*0.8;

      qreal  ratioW=(xrightborder - xleftborder)/w;
      qreal  ratioH=(ybuttomborder - ytopborder)/h;
      if(ratioW>=ratioH)
      {
        //  zoom=1/ratioW;
      }
      else
      {
        //  zoom=1/ratioH;
      }
      */

   /* // zoom=0.005;
     coordinatemove.setX(((xrightborder - xleftborder)*0.1- xleftborder)*zoom) ;
     coordinatemove.setY(((ybuttomborder - ytopborder)*0.1- ytopborder)*zoom)  ;



   QRectF rectX=QRectF(QPointF(xleftborder*1.2*zoom,ytopborder*1.2*zoom),QPointF(xrightborder*1.2*zoom,ybuttomborder*1.2*zoom));
   auto csene=new QGraphicsScene(rectX);
   auto view=new CentralView(csene);
   setCentralWidget(view);



    drawDXF(csene,view,creationClass);


   delete dxf;
   delete creationClass;
   */

    m_centralScene = new CentralScene;
    QRect rect = QApplication::desktop()->rect();

    m_centralScene->setSceneRect(rect.x(),rect.y(),rect.width()-50,rect.bottom()-300);
    m_topoView = new TopoView(m_centralScene);
    m_centralView = new CentralView(0,m_centralScene,m_topoView);
    setCentralWidget(m_centralView);
}

void MainWindow::createPropertyWindow()
{
    doubleManager = new QtDoublePropertyManager(this);
    stringManager = new QtStringPropertyManager(this);
    colorManager = new QtColorPropertyManager(this);
    fontManager = new QtFontPropertyManager(this);
    pointManager = new QtPointPropertyManager(this);
    sizeManager = new QtSizePropertyManager(this);
    boolManager = new QtBoolPropertyManager(this);
    intManager = new QtIntPropertyManager(this);

    connect(doubleManager, SIGNAL(valueChanged(QtProperty *, double)),
                this, SLOT(valueChanged(QtProperty *, double)));
    connect(stringManager, SIGNAL(valueChanged(QtProperty *, const QString &)),
                this, SLOT(valueChanged(QtProperty *, const QString &)));
    connect(colorManager, SIGNAL(valueChanged(QtProperty *, const QColor &)),
                this, SLOT(valueChanged(QtProperty *, const QColor &)));
    connect(fontManager, SIGNAL(valueChanged(QtProperty *, const QFont &)),
                this, SLOT(valueChanged(QtProperty *, const QFont &)));
    connect(pointManager, SIGNAL(valueChanged(QtProperty *, const QPoint &)),
                this, SLOT(valueChanged(QtProperty *, const QPoint &)));
    connect(sizeManager, SIGNAL(valueChanged(QtProperty *, const QSize &)),
                this, SLOT(valueChanged(QtProperty *, const QSize &)));
    connect(boolManager,SIGNAL(valueChanged(QtProperty*,bool)),
            this,SLOT(valueChanged(QtProperty*,bool)));
    connect(intManager,SIGNAL(valueChanged(QtProperty*,int)),this,SLOT(valueChanged(QtProperty*,int)));

    QtDoubleSpinBoxFactory *doubleSpinBoxFactory = new QtDoubleSpinBoxFactory(this);
    QtCheckBoxFactory *checkBoxFactory = new QtCheckBoxFactory(this);
    QtSpinBoxFactory *spinBoxFactory = new QtSpinBoxFactory(this);
    QtLineEditFactory *lineEditFactory = new QtLineEditFactory(this);
    QtEnumEditorFactory *comboBoxFactory = new QtEnumEditorFactory(this);

    m_propertyWindow = new QDockWidget(this);
    m_propertyWindow->setWindowTitle("属性栏");
    addDockWidget(Qt::RightDockWidgetArea, m_propertyWindow);

    propertyEditor = new QtTreePropertyBrowser(m_propertyWindow);
    propertyEditor->setFactoryForManager(doubleManager, doubleSpinBoxFactory);
    propertyEditor->setFactoryForManager(stringManager, lineEditFactory);
    propertyEditor->setFactoryForManager(colorManager->subIntPropertyManager(), spinBoxFactory);
    propertyEditor->setFactoryForManager(fontManager->subIntPropertyManager(), spinBoxFactory);
    propertyEditor->setFactoryForManager(fontManager->subBoolPropertyManager(), checkBoxFactory);
    propertyEditor->setFactoryForManager(fontManager->subEnumPropertyManager(), comboBoxFactory);
    propertyEditor->setFactoryForManager(pointManager->subIntPropertyManager(), spinBoxFactory);
    propertyEditor->setFactoryForManager(sizeManager->subIntPropertyManager(), spinBoxFactory);
    propertyEditor->setFactoryForManager(boolManager,checkBoxFactory);
    propertyEditor->setFactoryForManager(intManager,spinBoxFactory);

    m_propertyWindow->setWidget(propertyEditor);
}

void MainWindow::createActions(){
    QMenu *menu_file = new QMenu("文件",this);
    QMenu *menu_edit = new QMenu("编辑",this);
    QMenu *menu_tool = new QMenu("工具",this);
    QMenu *menu_run = new QMenu("运行",this);
    QMenu *menu_view = new QMenu("视图",this);

    QMenu *menu_window = new QMenu("窗口",this);
    QMenu *menu_agv  = new QMenu("AGV信息",this);
    QMenu *menu_help = new QMenu("帮助",this);

    action_open = menu_file->addAction(QPixmap(":/action/images/open.ico"),"打开");
    action_open->setShortcut(QKeySequence::Open);
    action_save = menu_file->addAction(QPixmap(":/action/images/save.ico"),"保存");
    action_save->setShortcut(QKeySequence::Save);
    //action_export = menu_file->addAction(QPixmap(":/action/images/export.ico"),"导出");
    menu_file->addSeparator();
    QStringList list = get_recentOpenFileName();
    for(int i=0;i<list.length();i++){
        QAction *action = new QAction(list.at(i),this);
        action->setData(list.at(i));
        connect(action,SIGNAL(triggered()),this,SLOT(open_recentFile()));
        menu_file->addAction(action);
    }
    action_exit = menu_file->addAction(QPixmap(":/action/images/exit.ico"),"退出");
    action_undo = m_centralView->m_undoStack->createUndoAction(this,"&Undo");
    action_undo->setShortcut(QKeySequence::Undo);
    action_undo->setIcon(QPixmap(":/action/images/undo.ico"));
    menu_edit->addAction(action_undo);
    menu_edit->addSeparator();
    menu_edit->addSeparator();
    action_rotate = menu_edit->addAction(QPixmap(":/action/images/rotation.ico"),"旋转");
    action_translateUpDown = menu_edit->addAction(QPixmap(":/action/images/translation_updown.ico"),"上下平移");
    action_translateLeftRight = menu_edit->addAction(QPixmap(":/action/images/translation_leftright.ico"),"左右平移");
    menu_edit->addSeparator();
    action_zoomin = menu_edit->addAction(QPixmap(":/action/images/zoomin.ico"),"放大");
    action_zoomin->setShortcut(QKeySequence::ZoomIn);
    action_zoomout = menu_edit->addAction(QPixmap(":/action/images/zoomout.ico"),"缩小");
    action_zoomout->setShortcut(QKeySequence::ZoomOut);
    menu_tool->addSeparator();

    menu_tool->addSeparator();
    menu_tool->addSeparator();
    menu_tool->addSeparator();
    action_missionManager = menu_run->addAction(QPixmap(":/action/images/missionManager.ico"),"任务管理器");
    action_requestManager = menu_run->addAction(QPixmap(":/action/images/bell.ico"),"呼叫管理器");
    menu_run->addSeparator();
    action_multiSystem=menu_run->addAction("多系统");
    action_multiSystem->setCheckable(true);
    action_multiSystem->setChecked(multi);
    action_prepare = menu_run->addAction("准备");
    action_prepare->setShortcut(QKeySequence("F4"));
    action_run = menu_run->addAction(QPixmap(":/action/images/run.ico"),"运行");
    action_run->setShortcut(QKeySequence("F5"));
    action_stop = menu_run->addAction(QPixmap(":/action/images/stop.ico"),"停止");
    action_stop->setShortcut(QKeySequence("F6"));
    action_showNodeName = menu_view->addAction("显示节点名称");
    action_showNodeName->setCheckable(true);
    menu_run->addSeparator();
    action_communicationSettings = menu_run->addAction(QPixmap(":/action/images/settings.ico"),"设置");
    action_toolbar = menu_window->addAction(QPixmap(":/action/images/toobar.ico"),"工具栏");
    action_toolbar->setCheckable(true);
    action_toolbar->setChecked(true);
    action_propertyWindow = menu_window->addAction(QPixmap(":/action/images/propertyWindow.ico"),"属性栏");
    action_propertyWindow->setCheckable(true);
    action_propertyWindow->setChecked(true);
    action_agvInformation=menu_agv->addAction(QPixmap(":/action/images/AGV.ico"),"AGV信息");
    action_about = menu_help->addAction(QPixmap(":/action/images/about.ico"),"关于 AGVFactory");
    action_help = menu_help->addAction(QPixmap(":/action/images/help.ico"),"帮助");

    spin_zoom = new QSpinBox;
    spin_zoom->setRange(10,500);
    spin_zoom->setValue(100);
    spin_zoom->setSingleStep(10);
    m_centralMenuBar = menuBar();
    m_centralMenuBar->addMenu(menu_file);
    m_centralMenuBar->addMenu(menu_edit);
    m_centralMenuBar->addMenu(menu_tool);
    m_centralMenuBar->addMenu(menu_run);
    m_centralMenuBar->addMenu(menu_agv);
    m_centralMenuBar->addMenu(menu_view);

    m_centralMenuBar->addMenu(menu_window);
    m_centralMenuBar->addMenu(menu_help);

    m_centralToolBar = addToolBar("工具栏");
    m_centralToolBar->addAction(action_open);
    m_centralToolBar->addAction(action_save);
    m_centralToolBar->addAction(action_undo);
    m_centralToolBar->addSeparator();
    m_centralToolBar->addAction(action_rotate);
    m_centralToolBar->addAction(action_translateUpDown);
    m_centralToolBar->addAction(action_translateLeftRight);
    m_centralToolBar->addSeparator();
    m_centralToolBar->addAction(action_zoomin);
    m_centralToolBar->addWidget(spin_zoom);
    m_centralToolBar->addAction(action_zoomout);
    m_centralToolBar->addSeparator();

    m_centralToolBar->addAction(action_missionManager);
    m_centralToolBar->addAction(action_agvInformation);
}

void MainWindow::createConnections(){
    connect(m_centralView,SIGNAL(itemMoving(QGraphicsItem*)),this,SLOT(itemMoved(QGraphicsItem*)));
    connect(m_centralView,SIGNAL(itemDrawing(QGraphicsItem*)),this,SLOT(itemDrawn(QGraphicsItem*)));
    connect(m_centralScene,SIGNAL(selectionChanged()),this,SLOT(selectChange()));
    connect(action_propertyWindow,SIGNAL(triggered(bool)),m_propertyWindow,SLOT(setVisible(bool)));
    connect(m_centralView,SIGNAL(set_keyLock(bool)),this,SLOT(setKeyLock(bool)));
    connect(m_propertyWindow,SIGNAL(visibilityChanged(bool)),action_propertyWindow,SLOT(setChecked(bool)));
    connect(action_toolbar,SIGNAL(triggered(bool)),m_centralToolBar,SLOT(setVisible(bool)));

    connect(action_zoomin,SIGNAL(triggered()),spin_zoom,SLOT(stepUp()));
    connect(action_zoomout,SIGNAL(triggered()),spin_zoom,SLOT(stepDown()));
   // connect(action_export,SIGNAL(triggered()),this,SLOT(export_to_png()));
    connect(action_save,SIGNAL(triggered()),this,SLOT(save()));
    connect(action_open,SIGNAL(triggered()),this,SLOT(load()));
    connect(action_exit,SIGNAL(triggered()),qApp,SLOT(quit()));
    connect(spin_zoom,SIGNAL(valueChanged(int)),m_centralView,SLOT(zoom(int)));
    connect(action_missionManager,SIGNAL(triggered()),this,SLOT(open_missionManager()));
    connect(action_prepare,SIGNAL(triggered()),this,SLOT(prepare()));
    connect(action_run,SIGNAL(triggered()),this,SLOT(run()));
    connect(action_agvInformation,SIGNAL(triggered(bool)),this,SLOT(agv_information()));
    connect(action_stop,SIGNAL(triggered()),this,SLOT(stop()));
    connect(m_centralView->m_undoStack,SIGNAL(indexChanged(int)),this,SLOT(set_documentDirty()));
    connect(m_topoView,SIGNAL(step_progressBar(int)),this,SLOT(set_progressStep(int)));
    connect(m_topoView,SIGNAL(set_dirty()),this,SLOT(set_topoViewDirty()));
   // connect(action_communicationSettings,SIGNAL(triggered()),this,SLOT(edit_settings()));
    connect(action_showNodeName,SIGNAL(triggered(bool)),this,SLOT(show_nodeName(bool)));
    connect(this,SIGNAL(update_progressBar(int)),this,SLOT(set_progressStep(int)));
    connect(this,SIGNAL(app_stateChange(int)),m_centralView,SLOT(app_stateChanged(int)));
}

void MainWindow::updateToolbarUI(QAction *action)
{
    foreach(QAction *a ,m_centralToolBar->actions()){
            if(a->isCheckable() && a!=action)
                a->setChecked(false);
    }
    if(action)
        if(action->isChecked())
            action->setChecked(true);
}
bool MainWindow::loadAGVs()
{
    QSqlQuery query = getQuery();
    query.exec("create table if not exists tb_agv ( name text,id int,startNode int,address text,type text,chargeLimit text");
    query.exec("select * from tb_agv");
    m_mapIDtoAGV.clear();
    while(query.next()){
        QSqlRecord record = query.record();

        QString name = record.value("name").toString();
         int id = record.value("id").toInt();
         int startNode = record.value("startNode").toInt();
          QByteArray    address = stringToAddr(record.value("address").toString());
           QString str_type = record.value("type").toString();
        int chargeStation=record.value("chargeStation").toInt();
        QStringList chargeLimit = record.value("chargeLimit").toString().split(",");


       int type=0;
       if(str_type=="PT20")
        {
            type = PT20;
        }
        else if (str_type=="PS20")
        {
            type = PS20;
        }
        else    type = NONE_TYPE;
       AGV_INFORMATION agvinformation;
       agvinformation.name=name;
       agvinformation.startNode=startNode;
       agvinformation.address=address;
       agvinformation.type=type;
       agvinformation.chargeNode=chargeStation;
       agvinformation.chargeLimit=chargeLimit;
       m_agvINformation.insert(id,agvinformation);
       m_agv_count.insert(id,0);
       if(!m_agvList.contains(id))
       m_agvList.append(id);
    }
    return true;
}

QStringList MainWindow::get_recentOpenFileName()
{
    QStringList list;
    QString path;
    for(int i=1;i<5;i++){
        path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_HISTORYPATH+QString::number(i)).toString();
        if(path=="") break;
        list.append(path);
    }
    return list;
}

void MainWindow::set_recentOpenFileName(QString currentPath)
{
    QStringList list = get_recentOpenFileName();
    if(list.contains(currentPath)){
        list.removeOne(currentPath);
        list.insert(0,currentPath);
    }
    else{
        if(list.length()>=5){
            list.removeLast();
            list.insert(0,currentPath);
        }
        else{
            list.insert(0,currentPath);
        }
    }
    for(int i=0;i<list.length();i++){
        g_setting->setValue(SETTING_PREFIX_PATH+SETTING_SUFFIX_HISTORYPATH+QString::number(i+1),list.at(i));
    }
}

void MainWindow::set_appState(int state)
{
    m_nAppState = state;
    action_run->setEnabled(m_nAppState==APP_PREPARE);
    action_multiSystem->setEnabled(m_nAppState==APP_STOP);
    action_prepare->setEnabled(m_nAppState==APP_STOP);
    action_stop->setEnabled(m_nAppState==APP_RUN || m_nAppState==APP_PREPARE);

    action_save->setEnabled(m_nAppState==APP_STOP);
    //action_export->setEnabled(m_nAppState==APP_STOP);
    action_open->setEnabled(m_nAppState==APP_STOP);
    action_communicationSettings->setEnabled(m_nAppState==APP_STOP);
    action_missionManager->setEnabled(m_nAppState!=APP_STOP);
    action_requestManager->setEnabled(m_nAppState!=APP_STOP);
    action_agvInformation->setEnabled(m_nAppState!=APP_STOP);
    emit app_stateChange(m_nAppState);
}



void MainWindow::selectChange()
{
    QList<QGraphicsItem* > items = m_centralScene->selectedItems();
    if(items.isEmpty()){
        m_currentItem = 0;
        return;
    }

    QMap<QtProperty *, QString>::ConstIterator itProp = propertyToId.constBegin();
    while (itProp != propertyToId.constEnd()) {
        delete itProp.key();
        itProp++;
    }
    propertyToId.clear();
    idToProperty.clear();

    m_currentItem = items.first();
    QtProperty *property;

    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    const QMetaObject *metaObject = item->metaObject();
    bool flag;

    property = stringManager->addProperty("Name");
    property->setEnabled(false);
    stringManager->setValue(property,item->property("_name").value<QString>());
    addProperty(property,QLatin1String("_name"));

    if(m_currentItem->type()==EDGE){
        property = intManager->addProperty("Start Node");
        property->setEnabled(false);
        intManager->setValue(property,item->property("_start_node").value<int>());
        addProperty(property,QLatin1String("_start_node"));
        property = intManager->addProperty("End Node");
        property->setEnabled(false);
        intManager->setValue(property,item->property("_end_node").value<int>());
        addProperty(property,QLatin1String("_end_node"));
    }
    flag = metaObject->indexOfProperty("_center")>-1;
    if(flag){
        property = pointManager->addProperty("Center");
        pointManager->setValue(property,item->property("_center").value<QPoint>());
        addProperty(property,QLatin1String("_center"));
    }

    property = doubleManager->addProperty(tr("Position Z"));
    doubleManager->setValue(property, m_currentItem->zValue());
    addProperty(property, QLatin1String("_zpos"));

    flag = metaObject->indexOfProperty("_pen_width")>-1;
    if(flag){
        property = intManager->addProperty("Pen Width");
        intManager->setValue(property,item->property("_pen_width").value<int>());
        intManager->setMinimum(property,1);
        addProperty(property,QLatin1String("_pen_width"));
    }
    flag = metaObject->indexOfProperty("_pen_color")>-1;
    if(flag){
        property = colorManager->addProperty("Pen Color");
        colorManager->setValue(property,item->property("_pen_color").value<QColor>());
        addProperty(property,QLatin1String("_pen_color"));
    }

    flag = metaObject->indexOfProperty("_brush_color")>-1;
    if(flag){
        property = colorManager->addProperty(tr("Brush Color"));
        colorManager->setValue(property,item->property("_brush_color").value<QColor>());
        addProperty(property,QLatin1String("_brush_color"));
    }
    flag = metaObject->indexOfProperty("_text")>-1;
    if(flag){
        property = stringManager->addProperty("Text");
        stringManager->setValue(property,item->property("_text").value<QString>());
        addProperty(property,QLatin1String("_text"));
    }
    flag = metaObject->indexOfProperty("_font")>-1;
    if(flag){
        property = fontManager->addProperty("Font");
        fontManager->setValue(property,item->property("_font").value<QFont>());
        addProperty(property,QLatin1String("_font"));
    }
    flag = metaObject->indexOfProperty("_size")>-1;
    if(flag){
        property = sizeManager->addProperty("Size");
        sizeManager->setValue(property,item->property("_size").value<QSize>());
        addProperty(property,QLatin1String("_size"));
    }
    flag = metaObject->indexOfProperty("_dash")>-1;
    if(flag){
        property = boolManager->addProperty("Dash");
        boolManager->setValue(property,item->property("_dash").value<bool>());
        addProperty(property,QLatin1String("_dash"));
    }
    flag = metaObject->indexOfProperty("_ver_type")>-1;
    if(flag){
        property = boolManager->addProperty("Station");
        boolManager->setValue(property,item->property("_ver_type").value<bool>());
        addProperty(property,QLatin1String("_ver_type"));
    }
    flag = metaObject->indexOfProperty("_rotate")>-1;
    if(flag){
        property = doubleManager->addProperty("Rotate");
        doubleManager->setValue(property,item->property("_rotate").value<double>());
        addProperty(property,QLatin1String("_rotate"));
    }
    flag = metaObject->indexOfProperty("_weight")>-1;
    if(flag){
        property = doubleManager->addProperty("Weight");
        doubleManager->setValue(property,item->property("_weight").value<double>());
        addProperty(property,QLatin1String("_weight"));
    }
    flag = metaObject->indexOfProperty("_power")>-1;
    if(flag){
        property = intManager->addProperty("剩余电量(%)");
        property->setEnabled(false);
        intManager->setValue(property,item->property("_power").value<int>());
        addProperty(property,QLatin1String("_power"));
    }

    if(m_currentItem->type()==AGV_PT20 || m_currentItem->type()==AGV_PS20)
        m_trafficManager->show_path((AGV*)m_currentItem);
}

void MainWindow::setlectMethond()
{
    QAction *action = qobject_cast<QAction*>(sender());
    if(!action) return;
    updateToolbarUI();
    m_centralView->prepareToMethod(action->data().toInt());
}
bool MainWindow::save()
{
    QString path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH).toString();
    if(path=="" || path.right(3)!=".db"){
        path = QFileDialog::getSaveFileName(this,"保存","","*.db");
        if(path=="") return false; // 取消则返回
        if(path.right(3)!=".db") path+=".db";
    }
    if(m_bDocumentChangeFlag || m_bTopoViewChangeFlag){
        int total_items = m_centralScene->items().length();
        int total_item_count = m_bTopoViewChangeFlag?total_items:
                      total_items-m_topoView->get_edgeCount()-m_topoView->get_verCount();
        set_progressBarMax(total_item_count,"正在保存，请稍后...");
        openDatabase(path);

        m_topoView->save_topoMap();

        set_recentOpenFileName(path); // 更新setting中最近使用的文档
        g_setting->setValue(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH,path);
        reset_documentDirty();
    }
    return true;
}

void MainWindow::load()
{ 
    if(m_bDocumentChangeFlag || m_bTopoViewChangeFlag){
        QMessageBox message(QMessageBox::Warning,"警告","当前文档已被修改，是否先保存当前工作？",
                             QMessageBox::Yes|QMessageBox::No);
        if(message.exec()==QMessageBox::Yes){
            if(save()==false) return; //如果取消了保存操作，则不能打开新的文档
        }
    }
    QString open_file_path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_OPENFILEPATH).toString();
    QString path = QFileDialog::getOpenFileName(this,"打开",open_file_path,"*.db");
    if(path=="") return;
    m_topoView->clear();
    m_centralScene->clear();
    openDatabase(path);
    //loadGraphicsItem();
    m_topoView->load_topoMap();
    m_topoView->show_nodeName(action_showNodeName->isChecked());
    g_setting->setValue(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH,path);
    g_setting->setValue(SETTING_PREFIX_PATH+SETTING_SUFFIX_OPENFILEPATH,path);
    set_recentOpenFileName(path);
    reset_documentDirty();
}

void MainWindow::open_recentFile()
{
    QAction *action = qobject_cast<QAction*>(sender());
    if(!action) return;
    QString path = action->data().toString();
    if(path=="") return;
    m_topoView->clear();
    foreach(QGraphicsItem *item,m_centralScene->items())
        m_centralScene->removeItem(item);
    openDatabase(path);
    //loadGraphicsItem();
    m_topoView->load_topoMap();
    g_setting->setValue(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH,path);
    setWindowTitle(WINDOWTITLE_PREFIX+path);
    reset_documentDirty();
}

void MainWindow::open_missionManager()
{
    if(m_missionManager->isHidden())
        m_missionManager->show();
    else
        m_missionManager->raise();

}

void MainWindow::prepare()  // 准备运行
{

      if(!open_serialPort())
       return;

    if(action_multiSystem->isChecked())
    {
     bool r= openSQLServer();
     if(r==false) return;
      emit multiUsed();
    }
    QString path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH).toString();
    if(!m_sweptArea)
    {
        m_sweptArea=new SweptArea;
        m_sweptArea->LoadTopoView(m_topoView);
        m_verInArea=m_sweptArea->verInArea;//马上注释掉
        //m_EquPointsInArea=m_sweptArea->EquPoInArea;
        m_edge_points=m_sweptArea->edge_points;
        m_collsionEdge=m_sweptArea->collsionEdge;
        m_collsionEdgeVer=m_sweptArea->collsionEdgeVer;
        m_huicheEdges  =m_sweptArea->huicheEdges;
        m_rukouEdges =m_sweptArea->rukouEdges;
    }
    if(!m_agvinformation)
    {
      m_agvinformation=new AgvInformation;
     // connect(m_agvinformation,SIGNAL(AgvInformationChange()),this,SLOT(AgvInformationChange()));
      connect(m_agvinformation,SIGNAL(addintoRun(int)),this,SLOT(addAGVintoSystem(int)));
      connect(m_agvinformation,SIGNAL(removeFromRun(int)),this,SLOT(removeFromSystem(int)));
      connect(this,SIGNAL(IntoSySucc(int)),m_agvinformation,SLOT(inSystem(int)));
      connect(this,SIGNAL(diconnectFromSystem(int)),m_agvinformation,SLOT(outSystem(int)));
    }
    if(!m_missionManager){
        m_missionManager = new MissionManager;
        connect(m_missionManager,SIGNAL(wms_connected(bool)),this,SLOT(wms_state_chanaged(bool)));
    }
    m_missionManager->loadTopoView(m_topoView);
    if(!m_trafficManager)
        m_trafficManager = new TrafficManager(m_missionManager);
    m_trafficManager->loadTopoView(m_topoView);
    m_trafficManager->loadDatabase();

    m_trafficManager->m_TrafficVerInArea=m_verInArea;

    QMap<int, QList<int> > m_collionSegments;
    m_topoView->crossSegments(m_collionSegments);

    m_trafficManager->setcrossPoint(m_collionSegments);
    //m_trafficManager->EquPoInArea(m_EquPointsInArea);
    m_trafficManager->collsionEdge(m_collsionEdge);
    m_trafficManager->collsionEdgeVer(m_collsionEdgeVer);
    m_trafficManager->huicheEdges(m_huicheEdges);
    m_trafficManager->rukouEdges(m_rukouEdges);
    connect(m_missionManager,SIGNAL(mission_deleted(quint64)),m_trafficManager,SLOT(mission_abort(quint64)));
    connect(m_trafficManager,SIGNAL(AGVstateChange(AGV*,bool)),m_missionManager,SLOT(MissionArrange(AGV*,bool)));
    //agvinformation  连接
    connect(m_agvinformation,SIGNAL(get_agvmission(int)),this,SLOT(get_agvAndMission(int)));
    connect(this,SIGNAL(missionfromId(bool,bool,int,int)),m_agvinformation,SLOT(receiveMission(bool,bool,int,int)));
    connect(m_agvinformation,SIGNAL(ToMissionmanager(int,bool,bool,bool)),this,SLOT(whichMission(int,bool,bool,bool)));
    connect(this,SIGNAL(missionTowrite(int,bool,quint64,bool)),m_missionManager,SLOT(MissionResetOrFin(int,bool,quint64,bool)));
    connect(this,SIGNAL(agvinfor(int)),m_trafficManager,SLOT(someInforDelate(int)));
    connect(this,SIGNAL(multiUsed()),m_trafficManager,SLOT(multisystemused()));
    //,
    if(!m_requestManager){
        m_requestManager = new RequestManager;
        connect(action_requestManager,SIGNAL(triggered(bool)),m_requestManager,SLOT(setHidden(bool)));
        connect(this,SIGNAL(app_stateChange(int)),m_requestManager,SLOT(app_stateChanged(int)));
        connect(m_requestManager,SIGNAL(request(QPair<int,int>,int)),m_missionManager,SLOT(new_request(QPair<int,int>,int)));
        connect(m_requestManager,SIGNAL(serial_write(QByteArray)),this,SLOT(serial_write(QByteArray)));
        connect(m_missionManager,SIGNAL(mission_accomplished(int,int)),m_requestManager,SLOT(request_accomplished(int,int)));
    }
    m_requestManager->load_topoView(m_topoView);
    m_requestManager->set_path(path);
     loadAGVs();
    set_appState(APP_PREPARE);




}

void MainWindow::agv_information()
{

   if(m_agvinformation->isHidden())
       m_agvinformation->show();
   else
       m_agvinformation->raise();
}
void MainWindow::run()
{
  /*  m_agvInUse=m_agvinformation->agvInUse();
    if(m_agvInUse.size()==0)
    {
         QMessageBox::warning(0,"错误","请加载AGV");
    }
    */

   /* set_appState(APP_RUN);
    foreach(AGV *agv,m_mapIDtoAGV.values()){
        m_trafficManager->addAGV(agv);
        m_missionManager->addAGV(agv);
        connect(agv,SIGNAL(state_change()),m_trafficManager,SLOT(updateGlobalPlanning()));
        connect(agv,SIGNAL(agv_moved(QGraphicsItem*)),this,SLOT(itemMoved(QGraphicsItem*)));
        connect(agv,SIGNAL(serial_write(QByteArray)),this,SLOT(serial_write(QByteArray)));
        agv->m_AGVverInArea=m_verInArea;
    }
    */
}

void MainWindow::stop()
{
    close_serialPort();
    set_appState(APP_STOP);
}

/*void MainWindow::edit_settings()
{
    if(m_settingDlg->exec()){
     // qDebug()<<"aaa";
    }

}
*/
void MainWindow::set_documentDirty()
{
    if(m_bDocumentChangeFlag==false){
        QString path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH).toString();
        setWindowTitle(WINDOWTITLE_PREFIX+path+"*");
    }
    m_bDocumentChangeFlag = true;
}

void MainWindow::reset_documentDirty()
{
    QString path = g_setting->value(SETTING_PREFIX_PATH+SETTING_SUFFIX_CURRENTPATH).toString();
    if(path=="") path = "untitled.db";
    m_bDocumentChangeFlag = false;
    m_bTopoViewChangeFlag = false;
    setWindowTitle(WINDOWTITLE_PREFIX+path);
}

void MainWindow::set_progressStep(int value)
{
    m_progressBar->setValue(value);
    if(value>=m_progressBar->maximum())
        statusBar()->hide();
}

void MainWindow::show_nodeName(bool flag)
{
    if(flag)
        action_showNodeName->setText("隐藏节点名称");
    else
        action_showNodeName->setText("显示节点名称");
    m_topoView->show_nodeName(flag);
}

void MainWindow::wms_state_chanaged(bool connected)
{
    if(connected){
        m_trayIcon->showMessage("AGV","WMS已连接");
        m_trayIcon->setToolTip("AGV(WMS已连接)");
    }
    else{
        m_trayIcon->showMessage("AGV","WMS已断开");
        m_trayIcon->setToolTip("AGV(WMS已断开");
    }
}

void MainWindow::set_progressBarMax(int max,QString text)
{
    m_progressBar->setRange(0,max);
    m_progressBar->setValue(0);
    m_progressBarLabel->setText(text);
    statusBar()->show();
}

//----------------------- 以下为属性栏函数定义 -------------------------
void MainWindow::valueChanged(QtProperty *property, double value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_xpos")){
        m_currentItem->setX(value);
    }else if(id==QLatin1String("_ypos")){
        m_currentItem->setY(value);
    }else if(id==QLatin1String("_zpos")){
        m_currentItem->setZValue(value);
    }else{
        if(!propertyToId.contains(property))
            return;
        if(!m_currentItem)
            return;
        QObject *item = dynamic_cast<QObject*>(m_currentItem);
        if(!item) return;
        if(id==QLatin1String("_rotate"))
            item->setProperty("_rotate",value);
        else if(id==QLatin1String("_weight"))
            item->setProperty("_weight",value);
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const QString &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    item->setProperty("_text",value);
    set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const QColor &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_brush_color")){
        item->setProperty("_brush_color",value);
    }else if(id==QLatin1String("_pen_color")){
        item->setProperty("_pen_color",value);
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const QFont &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_font")){
        item->setProperty("_font",value);
    }
    set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const QPoint &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_center")){
        item->setProperty("_center",value);
    }
    if(m_currentItem->type()==VER){
        TopoVer *ver = ((TopoVer*)item);
        ver->position_change(ver->pos());
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const QSize &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_size")){
        item->setProperty("_size",value);
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const bool &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_dash")){
        item->setProperty("_dash",value);
    }
    else if(id==QLatin1String("_ver_type")){
        item->setProperty("_ver_type",value);
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::valueChanged(QtProperty *property, const int &value)
{
    if(!propertyToId.contains(property))
        return;
    if(!m_currentItem)
        return;
    QObject *item = dynamic_cast<QObject*>(m_currentItem);
    if(!item) return;
    QString id = propertyToId[property];
    if(id==QLatin1String("_pen_width")){
        item->setProperty("_pen_width",value);
    }
    if(m_currentItem->type()==VER || m_currentItem->type()==EDGE)
        set_topoViewDirty();
    else
        set_documentDirty();
}

void MainWindow::itemMoved(QGraphicsItem *item)
{
    if(item!=m_currentItem) return;
    QObject *i = dynamic_cast<QObject*>(m_currentItem);
    pointManager->setValue(idToProperty[QLatin1String("_center")],i->property("_center").toPoint());
    doubleManager->setValue(idToProperty[QLatin1String("_rotate")],i->property("_rotate").toDouble());
    if(item->type()==PT20 || item->type()==PS20){
        intManager->setValue(idToProperty[QLatin1String("_power")],i->property("_power").toInt());
    }
}

void MainWindow::itemDrawn(QGraphicsItem *item)
{
    if(item!=m_currentItem) return;
    QObject *i = dynamic_cast<QObject*>(m_currentItem);
    sizeManager->setValue(idToProperty[QLatin1String("_size")],i->property("_size").toSize());
}

void MainWindow::addProperty(QtProperty *property, const QString &id)
{
    propertyToId[property] = id;
    idToProperty[id] = property;
    QtBrowserItem *item = propertyEditor->addProperty(property);
    if (idToExpanded.contains(id))
        propertyEditor->setExpanded(item, idToExpanded[id]);
}
//----------------------- 以上为属性栏函数定义 -------------------------------

//--------------------------- 串口通信函数定义 ------------------------------
bool MainWindow::open_serialPort()
{
    QString prefix = "/serial_com/";
    QString portname = g_setting->value(prefix+"Port").toString();
    if(portname.isEmpty()){
        portname = "COM2";
        g_setting->setValue(prefix+"Port",portname);
    }
    serial = new QSerialPort(portname);
    if(!serial->open(QIODevice::ReadWrite)){
        QMessageBox::warning(0,"错误","串口打开错误，计算机是否插入串口？");
        return false;
    }
    int nBaud = g_setting->value(prefix+"Baud").toInt();
    if(nBaud==0){
        nBaud = 57600;
        g_setting->setValue(prefix+"Baud",nBaud);
    }
    serial->setBaudRate(nBaud);  //波特率
    serial->setDataBits(QSerialPort::Data8); //数据位
    serial->setParity(QSerialPort::NoParity);    //无奇偶校验
    serial->setStopBits(QSerialPort::OneStop);   //无停止位
    serial->setFlowControl(QSerialPort::NoFlowControl);  //无控制
    connect(serial,SIGNAL(readyRead()),this,SLOT(serial_read()));
    return true;
}

void MainWindow::close_serialPort()
{
    if(serial && serial->isOpen()) serial->close();
    delete serial;
    serial = NULL;
}

void MainWindow::serial_write(QByteArray data)
{
    static bool s_warning = true;
    if(serial && serial->isOpen()){
        serial->write(data);
    }
    else{
        stop();
        if(s_warning){
            QMessageBox::critical(0,"串口错误","未检测到调度盒,请确认调度盒已连接并重启软件.");
            s_warning = false;
        }

    }
}

void MainWindow::serial_read()
{
    static char s_startup = -1;
    static char s_frame_type = 0;
    static int s_length = -1;
    if(s_length==-1){
        serial->read(&s_startup,1);
        if(s_startup==FRAME_FROM_REQUEST)
            s_length=0;
    }
    if(s_length==0){
        if(serial->bytesAvailable()>=3){
            char length[2];
            serial->read(length,2);
            serial->read(&s_frame_type,1);
            s_length = ((((uchar)length[0])<<8)&0xff00) | (((uchar)length[1])&0xff);
        }
    }
    if(s_length>14){
            readbuf = serial->readAll();
            if(readbuf.length()>=s_length)
            {
                readbuf.insert(0,s_frame_type);
                if((0xff-_8BitsSum(readbuf.mid(0,s_length)))==(uchar)(readbuf.at(s_length))){
                    QByteArray address;
                    address = readbuf.mid(1,8);
                    if(m_mapIDtoAGV.count(address)){
                        QByteArray extract_buf = readbuf.mid(12,s_length-12);
                        if(extract_buf.at(0)==0x40 && extract_buf.at(extract_buf.length()-1)==0x23){
                            m_mapIDtoAGV.value(address)->recvData(extract_buf.at(2),extract_buf.mid(3,extract_buf.length()-3));
                        }
                    }
                    else{
                        m_requestManager->recvData(QPair<QByteArray,uchar>(address,readbuf.at(readbuf.length()-2)));
                    }
                }
            }
            readbuf.clear();
            s_length = -1;
    }

    else if(s_length==7)
    {     
             readbuf = serial->readAll();
             if(readbuf.length()>=s_length)
             {
                 readbuf.insert(0,s_frame_type);
                 if((0xff-_8BitsSum(readbuf.mid(0,s_length)))==(uchar)(readbuf.at(s_length)))
                 {
                     if((readbuf.at(5)==0x25))
                     {
                         qDebug()<<"检测到掉线信息";
                        int s_frame_id=(int)readbuf.at(1);
                        if (s_frame_id<0)
                           s_frame_id=s_frame_id+256;
                        if(m_agv_count.keys().contains(s_frame_id))
                        {
                            int count =m_agv_count.value(s_frame_id);

                            count++;
                            m_agv_count.insert(s_frame_id,count);
                          //  m_agv_count[s_frame_id]=count;
                            if(count>=diaoxianchonglian)
                            {
                                //removeFromSystem(s_frame_id);
                                stopAgvSent(s_frame_id);

                            }
                        }


                     }
                 }
             }
            readbuf.clear();
            s_length = -1;
    }
    else
    {

         readbuf = serial->readAll();
         readbuf.clear();
          s_length = -1;
    }

}


//-------------------------- 以上为串口通信函数定义 ------------------------------
// -----------------------------  后台运行函数定义开始  ---------------------------
void MainWindow::onSystemTrayIconClicked(QSystemTrayIcon::ActivationReason reason)
{
    switch(reason){
    case QSystemTrayIcon::Trigger:
        if(this->isHidden()){
            this->showMaximized();
        }
        else{
            this->hide();
            if(m_missionManager && m_missionManager->isVisible())
                m_missionManager->hide();
            m_trayIcon->showMessage(tr("AGV"),tr("单击重新回到主界面"));
        }
        break;
    default:
        break;
    }
}

void MainWindow::changeEvent(QEvent *e)
{
    if((e->type()==QEvent::WindowStateChange)&&this->isMinimized()){
        this->hide();
        if(m_missionManager && m_missionManager->isVisible())
            m_missionManager->hide();
        m_trayIcon->showMessage(tr("AGV"),tr("单击重新回到主界面"));
    }
}

void MainWindow::closeEvent(QCloseEvent *e)
{
    if(isVisible()){
        this->hide();
        if(m_missionManager && m_missionManager->isVisible())
            m_missionManager->hide();
        m_trayIcon->showMessage(tr("AGV"),tr("单击重新回到主界面"));
        e->ignore();
    }
}
// ------------------------------  后台运行函数定义结束  ----------------------------

//----------------------agv变化---------

void MainWindow::addAGVintoSystem(int id)
{
        qDebug()<<"加入系统";
        QByteArray address=m_agvINformation.value(id).address;
        int type=m_agvINformation.value(id).type;
        QString name=m_agvINformation.value(id).name;
        int startNode=m_agvINformation.value(id).startNode;
        QStringList chargeLimit=m_agvINformation.value(id).chargeLimit;
        AGV *agv=new AGV(m_centralScene,m_topoView,type,name,id,address,startNode,chargeLimit.first().toInt(),chargeLimit.at(1).toInt(),chargeLimit.at(2).toInt());
        m_mapIDtoAGV[address] =agv;

        m_trafficManager->addAGV(agv);
        m_missionManager->addAGV(agv);
        connect(agv,SIGNAL(state_change()),m_trafficManager,SLOT(updateGlobalPlanning()));
        connect(agv,SIGNAL(agv_moved(QGraphicsItem*)),this,SLOT(itemMoved(QGraphicsItem*)));
        connect(agv,SIGNAL(serial_write(QByteArray)),this,SLOT(serial_write(QByteArray)));
        agv->m_AGVverInArea=m_verInArea;

        emit IntoSySucc(id);

}
void MainWindow::stopAgvSent(int id)
{
     qDebug()<<"掉线"<<id;
      QMap<QByteArray,AGV*> m_addressAgv=m_mapIDtoAGV;
     foreach (AGV *agv, m_addressAgv.values()) {
          if( agv->get_id()==id)
          {
             agv->killTimer(agv->m_nTimerID);
             agv->m_nTimerID=0;
             m_agv_count[id]=0;
            emit diconnectFromSystem(id);
          }
     }
          m_mapIDtoAGV=m_addressAgv;
}
void MainWindow::removeFromSystem(int id)
{
     qDebug()<<"移除系统"<<id;
     QMap<QByteArray,AGV*> m_addressAgv=m_mapIDtoAGV;
    foreach (AGV *agv, m_addressAgv.values()) {
         if( agv->get_id()==id)
         {
             QByteArray a=m_addressAgv.key(agv);
             m_addressAgv.remove(a);
             int target=agv->get_targetID();
             m_topoView->set_register(QString("Ver_%1").arg(target),"",agv->get_count());
             agv->~AGV();
         }
    }
            m_mapIDtoAGV=m_addressAgv;

}
void MainWindow::whichMission(int id, bool hasmission, bool reset, bool finish)
{
   // emit
    QMap<QString,St_Mission> m_agvStMission=m_trafficManager->m_mapAGVandMission;
    AGV_INFORMATION infor=m_agvINformation.value(id);
    QString agvname=infor.name;
    if(hasmission==true)
    {
         if(m_agvStMission.keys().contains(agvname))
         {
             Mission mission=m_agvStMission.value(agvname).m_mission;
             quint64 missionid=mission.m_nID;
             if((reset==true)&&(finish==false))
             emit missionTowrite(id,hasmission,missionid,true);
             else if((reset==false)&&(finish==true))
             emit missionTowrite(id,hasmission,missionid,false);
         }
    }
    else
    {
         emit missionTowrite(id,hasmission,0,false);
        qDebug()<<"无任务";
    }
    emit agvinfor(id);

}
void MainWindow::get_agvAndMission(int id)
{
   QMap<QString,St_Mission> m_agvStMission=m_trafficManager->m_mapAGVandMission;

   AGV_INFORMATION infor=m_agvINformation.value(id);
   QString agvname=infor.name;
   if(m_agvStMission.keys().contains(agvname))
   {
       Mission mission=m_agvStMission.value(agvname).m_mission;
       int start=mission.m_nStartNodeID;
       int end  =mission.m_nEndNodeID;
       bool reach=mission.m_bReachStartNode;
       emit missionfromId(true,reach,start,end);

   }
   else
   {
       emit missionfromId(false,0,0,0);
   }




}
